/* groovylint-disable DuplicateStringLiteral, LineLength */
/*
    *  MagWeb Local
    *
    *  Copyright 2025 Anthony Uwadia
    *
    *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
    *  in compliance with the License. You may obtain a copy of the License at:
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
    *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
    *  for the specific language governing permissions and limitations under the License.
    *
 */
import hubitat.device.HubAction
import hubitat.device.Protocol

/* groovylint-disable-next-line MethodCount */
metadata {
    definition(name: 'MagWeb Network Relay', namespace: 'elitexen', author: 'Anthony Uwadia') {
        capability 'Sensor'
        capability 'Configuration'
        capability 'Initialize'

        capability 'Battery'
        capability 'PowerMeter'
        capability 'EnergyMeter'
        capability 'VoltageMeasurement'

        attribute 'voltage', 'number'
        // attribute "voltageStr", "text"
        attribute 'energy', 'number'
        attribute 'power', 'number'
        attribute 'battery', 'number'
        attribute 'EnergyRate', 'text'
    // attribute "LastUpdate", "number"
    }
}

preferences {
    section('Status') {
        input name: 'pollingEnable', type: 'bool', title: 'Enable Polling', defaultValue: true
    }
    section('MagWeb Address') {
        input 'IP', 'text', title: 'IP Address', required: true
        input 'Port', 'text', title: 'Port', required: true
    }
    section('Debugging') {
        input name: 'logEnable', type: 'bool', title: 'Enable debug logging', defaultValue: false
    }
}

void logMessage(level, msg) {
    if (logEnable) {
        switch(level) {
            case 'debug':
                log.debug msg
                break
            case 'info':
                log.info msg
                break
            case 'error':
                log.error msg
                break
        }
    }
}


/* groovylint-disable-next-line NoDef */
void logDebug(msg) {
    if (logEnable) {
        logMessage('debug', msg)
    }
}
/* groovylint-disable-next-line NoDef */
void logInfo(msg) {
    if (logEnable) {
        logMessage('info', msg)
    }
}
/* groovylint-disable-next-line NoDef */
void logError(title, err) {
    if (logEnable) {
        logMessage('error', err)
    }
}

void disableLogging() {
    log.warn 'debug logging disabled...'
    device.updateSetting('logEnable', [value: 'false', type: 'bool'])
}

void tryToUnschedule() {
    try {
        unschedule()
    } catch (e) {
        logError('caught exception', e)
    }
}

void initMethods(String msg) {
    logInfo 'About to Init'
    logInfo msg

    if (logEnable) {
         runIn(1800, disableLogging)
    }

    tryToUnschedule()
    clearState()

    if (pollingEnable) {
        tryToUnschedule()
        connectMwLocal()
    }

    runIn(60, pollingHeartbeat)
    logInfo 'Done with Init'
}

void pollingHeartbeat() {
    log.info 'Polling Heartbeat Executed'
    runIn(60, pollingHeartbeat)

    try {
        if (pollingEnable) {
            tryToUnschedule()
            connectMwLocal()
        }
    } catch (e) {
        logError('MW Local connect failed initialize error', e)
    }
}

void updated() {
    initMethods('updated...')
}

void installed() {
    initMethods('installed...')
}

void configure() {
    initMethods('configured...')
}

void initialize() {
    initMethods('initialized...')
}

void clearState() {
    logDebug 'Clearing State:'
    state.clear()

    for (entry in state) {
        logDebug "State: $entry.key = $entry.value"
        state[entry.key] = ''
    }

    def st = device.getCurrentStates()
    for (entry in st) {
        logDebug "curr State: $entry.name = $entry.value"
        state.remove(entry.name)
        device.deleteCurrentState(entry.name)
    }

    logDebug 'State Cleared!'
}

void refresh() {
    poll()
}

void poll() {
    if (pollingEnable) {
        logDebug 'Scheduling MW'
        tryToUnschedule()
        connectMwLocal()
    }

    logDebug "Executing 'poll'"
    def message = ' '
    def ha = new HubAction(message
        , Protocol.RAW_LAN
        , [callback: 'parserMagWebLan',
         destinationAddress: "${settings.IP}:${settings.Port}",
         type: HubAction.Type.LAN_TYPE_RAW,
          encoding: HubAction.Encoding.HEX_STRING,
          timeout: 45,])
    logDebug "<tcp>${settings.IP}:${settings.Port}</tcp>"
    logDebug "<hubaction>${ha}</hubaction>"
    sendHubCommand(ha)

    logDebug "Done with 'poll'"
    logDebug ' '
}

void parserMagWebLan(String message) {
    logDebug "Parsing MW Lan'${message}'"
}

void scheduleMw() {
    schedule('0/15 * * * * ? *', connectMwLocal)
}

void connectMwLocal() {
    tryToUnschedule()

    try {
        //log.debug "Trying to connect"
        //log.debug "<tcp>${settings.IP}:${settings.Port}</tcp>"
        interfaces.rawSocket.connect(settings.IP, settings.Port.toInteger())
    //log.error "connected"
    } catch (e) {
        logError('MW Local connect failed initialize error', e)
        scheduleMw()
    }
}

void closeSocket() {
    interfaces.rawSocket.close()
}

void connectMwCloud(String message) {
    try {
        //log.debug "Trying to connect"
        //log.debug "<tcp>${settings.IP}:${settings.Port}</tcp>"
        interfaces.rawSocket.connect('69.9.174.134', 4020, byteInterface: true)
        interfaces.rawSocket.sendMessage(message)
        runIn(1, closeSocket)
    //log.error "connected"
    } catch (e) {
        logError('MW Cloud connect failed initialize error', e)
    }
}

void parse(String message) {
    closeSocket()
    tryToUnschedule()

    if (message.length() > 125) {
        connectMwCloud(message)
    }

    scheduleMw()
    parserMagWebLocal(message)

//log.warn "TCP Response is ${response}"
// def encrResponse = parseLanMessage(response)
// def cmdResponse = parseJson(inputXOR(encrResponse))
// log.warn "TCP Return message is ${cmdResponse}"
}






String getInverterStatus(String code) {
    Map<String, String> inverterStatusMap = [
        '00': 'Charger Standby - AC in, charging disabled',
        '01': 'EQMODE - unit is eq\'ing with ac',
        '02': 'FLOATMODE - unit is float charging w/ac',
        '04': 'ABSORBMODE - unit is charging in absorb w/ ac',
        '08': 'BULKMODE - unit is charging in bulk mode with ac applied',
        '09': 'BATSAVERMODE - unit is charge mode but no charge current since bat is full',
        '10': 'CHARGEMODE - unit is in charge mode, no ac applied',
        '20': 'Off - inverter off, charger off waiting for user input(no AC pass through)',
        '40': 'INVERTMODE - inverter on (charger on or off)',
        '50': 'Inverter Standby - MS rev 4.0 or later only (PAE)',
        '80': 'SEARCHMODE - searching for load (charger on or off)'
    ]
    return inverterStatusMap[code] ?: 'Unknown'
}

String getInverterFault(String code) {
    Map<String, String> inverterFaultMap = [
        '00': 'No Fault on inverter - not used',
        '01': 'STUCKRELAY',
        '02': 'DC_OVERLOAD - DC bridge overload fault',
        '03': 'AC_OVERLOAD - AC output overload fault',
        '04': 'DEAD BAT - charging a dead battery',
        '05': 'BACKFEED - AC Backfeed',
        '08': 'LOWBAT - low bat cutout',
        '09': 'HIGHBAT - high bat cutout',
        '0A': 'HIGHACVOLTS - high ac output voltage',
        '10': 'BAD_BRIDGE - Remote displays = Internal Fault 1 = bad fet bridge',
        '12': 'NTC_FAULT - Remote displays = Internal Fault 2 = fets too hot (>20C step)',
        '13': 'FET_OVERLOAD - Remote displays = Fet Overload = FETS too hot too fast (6C over 4 sec)',
        '14': 'INTERNAL_FAULT4 - Not used',
        '16': 'STACKER_MODE_FAULT - Stacker fault, both units not in same mode, problem with other inverter',
        '18': 'STACKER_CLK_PH_FAULT - Stacker sync clocks are not in phase',
        '17': 'STACKER_NO_CLK_FAULT - Stacker does not detect other stackers sync clock',
        '19': 'STACKER_PH_LOSS_FAULT - Stacker AC output voltage is not properly phased',
        '20': 'OVERTEMP - overtemp shutdown',
        '21': 'RELAY_FAULT - Transfer relay is not closed in chg mode',
        '80': 'CHARGER_FAULT - Bridge fault in chg mode = max PWM, no ac amps, Vbat < FloatV',
        '81': 'HIBATEMP - high battery temp',
        '90': 'OPEN_SELCO_TCO - open transformer TCO temperature cutout',
        '91': 'CB3 OPEN FAULT - open input 30 amp AC Breaker CB3'
    ]
    return inverterFaultMap[code] ?: 'Unknown'
}




String getInverterModel(String code) {
    Map<String, String> modelMap = [
        '06':'MM612',
        '07':'MM612-AE',
        '08':'MM1212',
        '09':'MMS1012',
        '0A':'MM1012E',
        '0B':'MM1512',
        '0F':'ME1512',
        '14':'ME2012',
        '19':'ME2512',
        '1E':'ME3112',
        '23':'MS2012',
        '28':'MS2012E',
        '2D':'MS2812',
        '2F':'MS2712E',
        '35':'MM1324E',
        '36':'MM1524',
        '37':'RD1824',
        '3B':'RD2624E',
        '3C':'MM1x24E',
        '3F':'RD2824',
        '45':'RD4024E',
        '4A':'RD3924',
        '5A':'MS4124E',
        '5B':'MS2024',
        '69':'MS4024',
        '6A':'MS4024AE',
        '6B':'MS4024PAE',
        '6F':'MS4448AE',
        '70':'MS3748AEJ',
        '73':'MS4448PAE',
        '74':'MS3748PAEJ'
    ]
    return modelMap[code] ?: 'Unknown'
}

String getStackMode(String code) {
    Map<String, String> stackModeMap = [
        '00': 'Standalone unit',
        '01': 'Parallel stack - master',
        '02': 'Parallel stack - slave',
        '04': 'Series stack - master',
        '08': 'Series stack - slave'
    ]
    return stackModeMap[code] ?: 'Unknown'
}

String getBatteryType(String code) {
    Map<String, String> batteryTypeMap = [
        '2': 'Gel',
        '4': 'Flooded',
        '8': 'AGM',
        '10': 'AGMv2'
    ]
    return batteryTypeMap[code] ?: 'Custom'
}

String getAutoGenStart(String code) {
    Map<String, String> autoGenMap = [
        '1': 'Off',
        '2': 'Enabled',
        '3': 'Test',
        '4': 'Enabled with Quiet Time',
        '5': 'On'
    ]
    return autoGenMap[code] ?: 'Unknown'
}

BigDecimal calculateEnergyRate(Map results) {
    BigDecimal rate = 0
    try {
        rate = results['BatteryAmps'] / results['BatterySize'] * 100
    } catch (Exception ex) {
        rate = 0
    }
    return Math.round(rate * 100) / 100
}















/* groovylint-disable-next-line MethodSize */
void parserMagWebLocal(String msg) {
    Map results = [:]
    logDebug "Parsing MW Local ('${msg.length()}')"
    logDebug "['${msg}']"

/*
        attribute "power", "number"
        attribute "humidity", "number"
        attribute "battery", "number"
        attribute "SoC", "string"
        attribute "voltstr", "string"
        attribute "voltage", "number"
*/
    for (int i = 0; i < msg.length() - 1; i += 2) {
        switch (i) {
            case 40:
                results.put('InverterStatus', getInverterStatus(msg[i..(i + 1)]))                
                break
            case 42:
                results.put('InverterFault', getInverterFault(msg[i..(i + 1)]))    
                break
            case 44:
                results.put('InverterVoltsDC', Integer.parseInt(msg[i..(i + 3)], 16) / 10)
                i += 2
                break
            case 48:
                results.put('InverterAmpsDC', Integer.parseInt(msg[i..(i + 3)], 16))
                results.put('power', results['InverterAmpsDC'])
                i += 2
                break
            case 52:
                results.put('InverterVoltsOutAC', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 54:
                results.put('InverterVoltsInAC', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 56:
                results.put('InverterLED', (msg[i..(i + 1)] == '00') ? 'Off' : 'On')
                break
            case 58:
                results.put('ChargerLED', (msg[i..(i + 1)] == '00') ? 'Off' : 'On')
                break
            case 60:
                results.put('InverterRevision', Integer.parseInt(msg[i..(i + 1)], 16) / 10)
                break
            case 62:
                results.put('TempBattery', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 64:
                results.put('TempTransformer', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 66:
                results.put('TempFET', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 68:                
                results.put('InverterModel', getInverterModel(msg[i..(i + 1)]))
                break
            case 70:
                results.put('StackMode', getStackMode(msg[i..(i + 1)])) 
                break
            case 72:
                results.put('InverterAmpsInAC', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 74:
                results.put('InverterAmpsOutAC', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 76:
                results.put('InverterHzAC', Integer.parseInt(msg[i..(i + 3)], 16) / 10)
                i += 2
                break

            case 82:
                results.put('RemoteInverterStatus', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 84:
                results.put('SearchWatts', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 88:
                results.put('BatteryType', getBatteryType(msg[i..(i + 1)]))
                break
            case 90:
                results.put('ChargerAmps', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 92:
                results.put('ShoreAmpsAC', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 94:
                results.put('RemoteVersion', Integer.parseInt(msg[i..(i + 1)], 16) / 10)
                break
            case 96:
                results.put('ParallelThreshold', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 98:
                results.put('AutoGenstart', getAutoGenStart(msg[i..(i + 1)]))
                break
            case 100:
                results.put('CutOutLowBatteryVolts', Integer.parseInt(msg[i..(i + 1)], 16) / 10)
                break
            case 102:
                results.put('CutOutLowVoltAC', Math.round(30 * Math.exp(0.00625 * Integer.parseInt(msg[i..(i + 1)], 16))))
                break
            case 104:
                results.put('ChargerFloatVolts', Integer.parseInt(msg[i..(i + 1)], 16) / 10)
                break
            case 106:
                results.put('ChargerEqVolts', Integer.parseInt(msg[i..(i + 1)], 16) / 10)
                break
            case 108:
                results.put('ChargerAbsorbTime', Integer.parseInt(msg[i..(i + 1)], 16) / 10)
                break
            case 110:
                results.put('ChargerHours', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 112:
                results.put('ChargerMin', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 114:
                results.put('GenRunTime', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 116:
                results.put('GenStartTemp', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 118:
                results.put('GenStartVolt', Integer.parseInt(msg[i..(i + 1)], 16) / 10)
                break
            case 120:
                results.put('GenQuietHours', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 182:
                results.put('BatterySize', Integer.parseInt(msg[i..(i + 1)], 16) * 10)
                break
            case 208:
                results.put('StateOfCharge', Integer.parseInt(msg[i..(i + 1)], 16))
                results.put('battery', Integer.parseInt(msg[i..(i + 1)], 16))
                break
            case 210:
                results.put('BatteryVolts', Integer.parseInt(msg[i..(i + 3)], 16) / 100)
                results.put('voltage', results['BatteryVolts'])
                results.put('voltageStr', results['BatteryVolts'] + 'V')
                i += 2
                break
            case 214:
                BigDecimal tmp = Integer.parseInt(msg[i..(i + 3)], 16)

                if (tmp > (65536 / 2)) {
                    tmp = tmp - 65536
                }
                tmp = tmp / 10
                results.put('BatteryAmps', tmp)
                results.put('energy', results['BatteryAmps'])
                i += 2
                break
            case 218:
                results.put('BatteryMinVolts', Integer.parseInt(msg[i..(i + 3)], 16) / 100)
                i += 2
                break
            case 222:
                results.put('BatteryMaxVolts', Integer.parseInt(msg[i..(i + 3)], 16) / 100)
                i += 2
                break
            case 226:
                BigDecimal tmp = Integer.parseInt(msg[i..(i + 3)], 16)

                if (tmp > (65536 / 2)) {
                    tmp = tmp - 65536
                }
                results.put('BatteryAmpHourInOut', tmp)
                i += 2
                break
            case 230:
                results.put('BatteryAmpHourTrip', Integer.parseInt(msg[i..(i + 3)], 16) / 10)
                i += 2
                break
            case 234:
                results.put('BatteryAmpHourCumulative', Integer.parseInt(msg[i..(i + 3)], 16) / 10)
                i += 2
                break
            case 238:
                results.put('BatteryMonitorRevision', Integer.parseInt(msg[i..(i + 1)], 16) / 10)
                break
            case 240:
                results.put('BatteryMonitorFault', Integer.parseInt(msg[i..(i + 1)], 16))
                break
        }
    }

    // Update results with the calculated EnergyRate
    BigDecimal Rate = calculateEnergyRate(results)
    results.put('EnergyRate', Rate + '% (' + results['BatteryAmps'] + 'A)')
    results.put('LastUpdate', new Date().getTime())

    generateEvents(results)
}

void generateEvents(Map results) {
    // log.debug "Parsed: ${results}"
    results.each { name, value ->
        if (state[name] != value) {
            state[name] = value
            if (['voltage', 'energy', 'power', 'EnergyRate', 'battery'].contains(name)) {
                sendEvent(name: name, value: value)
                logDebug "Value Updated: ${name}:${value}"
            }
        }
    }
    return null
}

void socketStatus(String message) {
    if (message.contains('status: open')) {
        logDebug 'Connected'
        return
    } else if (message.contains('Stream closed')) {
        logDebug 'Connection Closed'
        return
    } else if (message.contains('Socket closed')) {
        logDebug 'Connection Closed'
        return
    } else if (message.contains('status: closing')) {
        logDebug 'Closing connection'
        return
    } else if (message.contains('failure:')) {
        logDebug "Connection has failed with error [${message}]."
    } else {
        logDebug "Connection to has been lost due to an unknown error: ${message}"
    }
}

tiles {
    /*
    valueTile("displayName", "device.displayName", width: 3, height: 1) {
        state "val", label: '${currentValue}', action: 'poll'
    }
    */
    //log.debug currentValue("SoC")

    valueTile('SoC', 'device.SoC', width: 3, height: 2, decoration: 'flat') {
        state('val', label: '${currentValue}', backgroundColors:mapColor())
    }
    valueTile('voltage', 'device.voltstr', width: 3, height: 1) {
        state 'val', label: '${currentValue}'
    }

    /*
    standardTile("generator", "device.generator") {
        state "off", label: "off", icon: "st.switches.switch.off", backgroundColor: "#ffffff", action: 'poll'
        state "on", label: "on", icon: "st.switches.switch.on", backgroundColor: "#00a0dc", action: 'poll'
    }
    */
    valueTile('status', 'device.status', width: 3, height: 1) {
        state 'val', label: 'Status: ${currentValue}'
    }
    valueTile('fault', 'device.fault', width: 3, height: 1) {
        state 'val', label: 'Faults: ${currentValue}'
    }
    valueTile('inverter', 'device.inverter', width: 3, height: 1) {
        state 'val', label: 'Inverter: ${currentValue}'
    }
    valueTile('converter', 'device.converter', width: 3, height: 1) {
        state 'val', label: 'Converter: ${currentValue}'
    }
    valueTile('tbattery', 'device.tbattery', width: 3, height: 1) {
        state 'val', label: 'Battery: ${currentValue}'
    }
    valueTile('ttransformer', 'device.ttransformer', width: 3, height: 1) {
        state 'val', label: 'Transformer: ${currentValue}'
    }
    valueTile('tfet', 'device.tfet', width: 3, height: 1) {
        state 'val', label: 'FET: ${currentValue}'
    }
    valueTile('ags', 'device.ags', width: 3, height: 1) {
        state 'val', label: 'AGS: ${currentValue}'
    }
    standardTile('age', 'device.age', decoration: 'flat') {
        state 'age', label: '${currentValue}', action: 'poll', icon:'st.secondary.refresh'
    }

    main('SoC')
}

String strState() {
    def ret = 'Almost!'
    //= device.currentValue("SoC")
    def me = state

    //ret = me[0]

    try {
        ret = me.toMapString
    } catch (ignored) {
    }
    logDebug 'ME:' + me
    //log.debug "Prop:" + me.getProperties()
    logDebug 'RET:' + ret

    return ret
}

def mapColor(val) {
    //log.debug "Coloring Val=" + val
    def ret = [
            [value: 25, color: '#bc2323'],
            [value: 50, color: '#f1d801'],
            [value: 75, color: '#1e9cbb'],
            [value: 85, color: '#90d2a7'],
            [value: 95, color: '#bc2323'],
        ]

    return ret
}

/* groovylint-disable-next-line UnusedPrivateMethod */
void sendTcpCmd(command) {
    def message = tcpEncrypt(command)            //    See note in method tcpEncrypt
    interfaces.rawSocket.connect(deviceIP, 9999,
                                 byteInterface: true,
                                 readDelay: 150,)
    interfaces.rawSocket.sendMessage(message)
    runIn(5, closeSocket)
}

void telnetStatus(String message) {
    logDebug "TelNetStatus '${message}'"
}

void message(String message) {
    logDebug "TcpStatus '${message}'"
}

//    Utility Methods
String tcpEncrypt(command) {
    String str = ''
    String encrCmd = '000000' + Integer.toHexString(command.length())
    def key = 0xAB
    for (int i = 0; i < command.length(); i++) {
        str = (command.charAt(i) as byte) ^ key
        key = str
        encrCmd += Integer.toHexString(str)
    }
    return encrCmd
}

/* groovylint-disable-next-line UnusedPrivateMethod */
String udpEncrypt(command) {
    String str = ''
    String encrCmd = ''
    def key = 0xAB
    for (int i = 0; i < command.length(); i++) {
        str = (command.charAt(i) as byte) ^ key
        key = str
        encrCmd += Integer.toHexString(str)
    }
    return encrCmd
}

String inputXOR(encrResponse) {
    String[] strBytes = encrResponse.split('(?<=\\G.{2})')
    String cmdResponse = ''
    def key = 0xAB
    def nextKey
    byte[] tmpXOR
    for (int i = 0; i < strBytes.length; i++) {
        nextKey = (byte)Integer.parseInt(strBytes[i], 16)    // could be negative
        tmpXOR = nextKey ^ key
        key = nextKey
        cmdResponse += new String(tmpXOR)
    }
    return cmdResponse
}
